(ns domain\obento)

(defstruct product [id price stock reserved-stock])

(defstruct stock-keeping-unit [product quantity])

(defstruct order [stock-keeping-units use-voucher])

(defn order-bigin [use-voucher]
  (order [] use-voucher))

(defn order-add [order sku]
  (update order :stock-keeping-units push sku))

(defn order-is-acceptable [order]
  (all? (fn [sku]
          (>= (-
                (get-in sku [:product :stock])
                (get-in sku [:product :reserved-stock]))
              (sku :quantity)))
        (order :stock-keeping-units)))

(defn- most-expensive [order]
  (let [sorted (sort (order :stock-keeping-units) (fn [x y]
                                                     (compare
                                                       (get-in y [:product :price])
                                                       (get-in x [:product :price]))))]
    (first sorted)))

(defn order-voucher-target-product-id [order]
  (get-in (most-expensive order) [:product :id]))

(defn order-total-amount [order]
  (let [most-expensive-product-id (order-voucher-target-product-id order)]
    (sum (map (fn [sku]
                (* (get-in sku [:product :price]) (if (and (order :use-voucher)
                                                           (= (get-in sku [:product :id]) most-expensive-product-id))
                                                    (dec (sku :quantity))
                                                    (sku :quantity))))
           (order :stock-keeping-units)))))
